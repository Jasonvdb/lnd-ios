// DO NOT EDIT.
// swift-format-ignore-file
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: lnclipb/lncli.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

struct Lnclipb_VersionResponse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// The version information for lncli.
  var lncli: Verrpc_Version {
    get {return _lncli ?? Verrpc_Version()}
    set {_lncli = newValue}
  }
  /// Returns true if `lncli` has been explicitly set.
  var hasLncli: Bool {return self._lncli != nil}
  /// Clears the value of `lncli`. Subsequent reads from it will return its default value.
  mutating func clearLncli() {self._lncli = nil}

  /// The version information for lnd.
  var lnd: Verrpc_Version {
    get {return _lnd ?? Verrpc_Version()}
    set {_lnd = newValue}
  }
  /// Returns true if `lnd` has been explicitly set.
  var hasLnd: Bool {return self._lnd != nil}
  /// Clears the value of `lnd`. Subsequent reads from it will return its default value.
  mutating func clearLnd() {self._lnd = nil}

  var unknownFields = SwiftProtobuf.UnknownStorage()

  init() {}

  fileprivate var _lncli: Verrpc_Version? = nil
  fileprivate var _lnd: Verrpc_Version? = nil
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "lnclipb"

extension Lnclipb_VersionResponse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  static let protoMessageName: String = _protobuf_package + ".VersionResponse"
  static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lncli"),
    2: .same(proto: "lnd"),
  ]

  mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularMessageField(value: &self._lncli)
      case 2: try decoder.decodeSingularMessageField(value: &self._lnd)
      default: break
      }
    }
  }

  func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if let v = self._lncli {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 1)
    }
    if let v = self._lnd {
      try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  static func ==(lhs: Lnclipb_VersionResponse, rhs: Lnclipb_VersionResponse) -> Bool {
    if lhs._lncli != rhs._lncli {return false}
    if lhs._lnd != rhs._lnd {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
